
phase6.o：     文件格式 elf32-i386


Disassembly of section .group:

00000000 <.group>:
   0:	01 00                	add    %eax,(%eax)
   2:	00 00                	add    %al,(%eax)
   4:	0c 00                	or     $0x0,%al
	...

Disassembly of section .text:

00000000 <KUjcwEWTkU>:
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 30             	sub    $0x30,%esp
   6:	c7 45 dc 4f 68 62 5a 	movl   $0x5a62684f,-0x24(%ebp)
   d:	c7 45 e0 58 45 70 58 	movl   $0x58704558,-0x20(%ebp)
  14:	c7 45 e4 6c 75 43 78 	movl   $0x7843756c,-0x1c(%ebp)
  1b:	c7 45 e8 43 46 4a 47 	movl   $0x474a4643,-0x18(%ebp)
  22:	c7 45 ec 63 6c 44 4a 	movl   $0x4a446c63,-0x14(%ebp)
  29:	c7 45 f0 50 68 61 4f 	movl   $0x4f616850,-0x10(%ebp)
  30:	c7 45 f4 73 54 68 68 	movl   $0x68685473,-0xc(%ebp)
  37:	c7 45 f8 54 67 70 00 	movl   $0x706754,-0x8(%ebp)
  3e:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
  45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  49:	78 15                	js     60 <KUjcwEWTkU+0x60>
  4b:	8b 45 08             	mov    0x8(%ebp),%eax
  4e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
  51:	7d 0d                	jge    60 <KUjcwEWTkU+0x60>
  53:	8d 55 dc             	lea    -0x24(%ebp),%edx
  56:	8b 45 08             	mov    0x8(%ebp),%eax
  59:	01 d0                	add    %edx,%eax
  5b:	0f b6 00             	movzbl (%eax),%eax
  5e:	eb 05                	jmp    65 <KUjcwEWTkU+0x65>
  60:	b8 00 00 00 00       	mov    $0x0,%eax
  65:	c9                   	leave  
  66:	c3                   	ret    

00000067 <transform_code>:
  67:	55                   	push   %ebp
  68:	89 e5                	mov    %esp,%ebp
  6a:	53                   	push   %ebx
  6b:	e8 fc ff ff ff       	call   6c <transform_code+0x5>
			6c: R_386_PC32	__x86.get_pc_thunk.bx
  70:	81 c3 02 00 00 00    	add    $0x2,%ebx
			72: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
  76:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			78: R_386_GOT32	WHtCKc
  7c:	8b 55 0c             	mov    0xc(%ebp),%edx
  7f:	8b 04 90             	mov    (%eax,%edx,4),%eax
  82:	83 e0 07             	and    $0x7,%eax
  85:	83 f8 07             	cmp    $0x7,%eax
  88:	0f 87 85 00 00 00    	ja     113 <.L6>
  8e:	c1 e0 02             	shl    $0x2,%eax
  91:	8b 84 18 5c 00 00 00 	mov    0x5c(%eax,%ebx,1),%eax
			94: R_386_GOTOFF	.rodata
  98:	01 d8                	add    %ebx,%eax
  9a:	ff e0                	jmp    *%eax

0000009c <.L7>:
  9c:	f7 55 08             	notl   0x8(%ebp)
  9f:	eb 76                	jmp    117 <.L6+0x4>

000000a1 <.L9>:
  a1:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			a3: R_386_GOT32	WHtCKc
  a7:	8b 55 0c             	mov    0xc(%ebp),%edx
  aa:	8b 04 90             	mov    (%eax,%edx,4),%eax
  ad:	83 e0 03             	and    $0x3,%eax
  b0:	89 c1                	mov    %eax,%ecx
  b2:	d3 7d 08             	sarl   %cl,0x8(%ebp)
  b5:	eb 60                	jmp    117 <.L6+0x4>

000000b7 <.L10>:
  b7:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			b9: R_386_GOT32	WHtCKc
  bd:	8b 55 0c             	mov    0xc(%ebp),%edx
  c0:	8b 04 90             	mov    (%eax,%edx,4),%eax
  c3:	f7 d0                	not    %eax
  c5:	21 45 08             	and    %eax,0x8(%ebp)
  c8:	eb 4d                	jmp    117 <.L6+0x4>

000000ca <.L11>:
  ca:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			cc: R_386_GOT32	WHtCKc
  d0:	8b 55 0c             	mov    0xc(%ebp),%edx
  d3:	8b 04 90             	mov    (%eax,%edx,4),%eax
  d6:	c1 e0 08             	shl    $0x8,%eax
  d9:	09 45 08             	or     %eax,0x8(%ebp)
  dc:	eb 39                	jmp    117 <.L6+0x4>

000000de <.L12>:
  de:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			e0: R_386_GOT32	WHtCKc
  e4:	8b 55 0c             	mov    0xc(%ebp),%edx
  e7:	8b 04 90             	mov    (%eax,%edx,4),%eax
  ea:	31 45 08             	xor    %eax,0x8(%ebp)
  ed:	eb 28                	jmp    117 <.L6+0x4>

000000ef <.L13>:
  ef:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			f1: R_386_GOT32	WHtCKc
  f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  f8:	8b 04 90             	mov    (%eax,%edx,4),%eax
  fb:	f7 d0                	not    %eax
  fd:	09 45 08             	or     %eax,0x8(%ebp)
 100:	eb 15                	jmp    117 <.L6+0x4>

00000102 <.L14>:
 102:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			104: R_386_GOT32	WHtCKc
 108:	8b 55 0c             	mov    0xc(%ebp),%edx
 10b:	8b 04 90             	mov    (%eax,%edx,4),%eax
 10e:	01 45 08             	add    %eax,0x8(%ebp)
 111:	eb 04                	jmp    117 <.L6+0x4>

00000113 <.L6>:
 113:	f7 5d 08             	negl   0x8(%ebp)
 116:	90                   	nop
 117:	8b 45 08             	mov    0x8(%ebp),%eax
 11a:	5b                   	pop    %ebx
 11b:	5d                   	pop    %ebp
 11c:	c3                   	ret    

0000011d <generate_code>:
 11d:	55                   	push   %ebp
 11e:	89 e5                	mov    %esp,%ebp
 120:	53                   	push   %ebx
 121:	83 ec 24             	sub    $0x24,%esp
 124:	e8 fc ff ff ff       	call   125 <generate_code+0x8>
			125: R_386_PC32	__x86.get_pc_thunk.bx
 129:	81 c3 02 00 00 00    	add    $0x2,%ebx
			12b: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
 12f:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			131: R_386_GOT32	IHBihm
 135:	8b 55 08             	mov    0x8(%ebp),%edx
 138:	89 10                	mov    %edx,(%eax)
 13a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 141:	eb 23                	jmp    166 <generate_code+0x49>
 143:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			145: R_386_GOT32	IHBihm
 149:	8b 00                	mov    (%eax),%eax
 14b:	8b 55 f4             	mov    -0xc(%ebp),%edx
 14e:	89 54 24 04          	mov    %edx,0x4(%esp)
 152:	89 04 24             	mov    %eax,(%esp)
 155:	e8 fc ff ff ff       	call   156 <generate_code+0x39>
			156: R_386_PLT32	transform_code
 15a:	8b 93 00 00 00 00    	mov    0x0(%ebx),%edx
			15c: R_386_GOT32	IHBihm
 160:	89 02                	mov    %eax,(%edx)
 162:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 166:	8b 45 f4             	mov    -0xc(%ebp),%eax
 169:	83 f8 0e             	cmp    $0xe,%eax
 16c:	76 d5                	jbe    143 <generate_code+0x26>
 16e:	83 c4 24             	add    $0x24,%esp
 171:	5b                   	pop    %ebx
 172:	5d                   	pop    %ebp
 173:	c3                   	ret    

00000174 <encode_1>:
 174:	55                   	push   %ebp
 175:	89 e5                	mov    %esp,%ebp
 177:	53                   	push   %ebx
 178:	83 ec 24             	sub    $0x24,%esp
 17b:	e8 fc ff ff ff       	call   17c <encode_1+0x8>
			17c: R_386_PC32	__x86.get_pc_thunk.bx
 180:	81 c3 02 00 00 00    	add    $0x2,%ebx
			182: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
 186:	8b 45 08             	mov    0x8(%ebp),%eax
 189:	89 04 24             	mov    %eax,(%esp)
 18c:	e8 fc ff ff ff       	call   18d <encode_1+0x19>
			18d: R_386_PLT32	strlen
 191:	89 45 f0             	mov    %eax,-0x10(%ebp)
 194:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 19b:	eb 5d                	jmp    1fa <encode_1+0x86>
 19d:	8b 55 f4             	mov    -0xc(%ebp),%edx
 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
 1a3:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 1a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
 1a9:	8b 45 08             	mov    0x8(%ebp),%eax
 1ac:	01 d0                	add    %edx,%eax
 1ae:	0f b6 00             	movzbl (%eax),%eax
 1b1:	0f be c0             	movsbl %al,%eax
 1b4:	8b 93 00 00 00 00    	mov    0x0(%ebx),%edx
			1b6: R_386_GOT32	YCsRCu
 1ba:	0f b6 14 02          	movzbl (%edx,%eax,1),%edx
 1be:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			1c0: R_386_GOT32	IHBihm
 1c4:	8b 00                	mov    (%eax),%eax
 1c6:	31 d0                	xor    %edx,%eax
 1c8:	83 e0 7f             	and    $0x7f,%eax
 1cb:	88 01                	mov    %al,(%ecx)
 1cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
 1d3:	01 d0                	add    %edx,%eax
 1d5:	0f b6 00             	movzbl (%eax),%eax
 1d8:	3c 1f                	cmp    $0x1f,%al
 1da:	7e 0f                	jle    1eb <encode_1+0x77>
 1dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
 1df:	8b 45 08             	mov    0x8(%ebp),%eax
 1e2:	01 d0                	add    %edx,%eax
 1e4:	0f b6 00             	movzbl (%eax),%eax
 1e7:	3c 7f                	cmp    $0x7f,%al
 1e9:	75 0b                	jne    1f6 <encode_1+0x82>
 1eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
 1ee:	8b 45 08             	mov    0x8(%ebp),%eax
 1f1:	01 d0                	add    %edx,%eax
 1f3:	c6 00 3f             	movb   $0x3f,(%eax)
 1f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
 1fd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
 200:	7c 9b                	jl     19d <encode_1+0x29>
 202:	8b 45 f0             	mov    -0x10(%ebp),%eax
 205:	83 c4 24             	add    $0x24,%esp
 208:	5b                   	pop    %ebx
 209:	5d                   	pop    %ebp
 20a:	c3                   	ret    

0000020b <encode_2>:
 20b:	55                   	push   %ebp
 20c:	89 e5                	mov    %esp,%ebp
 20e:	53                   	push   %ebx
 20f:	83 ec 24             	sub    $0x24,%esp
 212:	e8 fc ff ff ff       	call   213 <encode_2+0x8>
			213: R_386_PC32	__x86.get_pc_thunk.bx
 217:	81 c3 02 00 00 00    	add    $0x2,%ebx
			219: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
 21d:	8b 45 08             	mov    0x8(%ebp),%eax
 220:	89 04 24             	mov    %eax,(%esp)
 223:	e8 fc ff ff ff       	call   224 <encode_2+0x19>
			224: R_386_PLT32	strlen
 228:	89 45 f0             	mov    %eax,-0x10(%ebp)
 22b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 232:	eb 5d                	jmp    291 <encode_2+0x86>
 234:	8b 55 f4             	mov    -0xc(%ebp),%edx
 237:	8b 45 08             	mov    0x8(%ebp),%eax
 23a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
 23d:	8b 55 f4             	mov    -0xc(%ebp),%edx
 240:	8b 45 08             	mov    0x8(%ebp),%eax
 243:	01 d0                	add    %edx,%eax
 245:	0f b6 00             	movzbl (%eax),%eax
 248:	0f be c0             	movsbl %al,%eax
 24b:	8b 93 00 00 00 00    	mov    0x0(%ebx),%edx
			24d: R_386_GOT32	YCsRCu
 251:	0f b6 14 02          	movzbl (%edx,%eax,1),%edx
 255:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			257: R_386_GOT32	IHBihm
 25b:	8b 00                	mov    (%eax),%eax
 25d:	01 d0                	add    %edx,%eax
 25f:	83 e0 7f             	and    $0x7f,%eax
 262:	88 01                	mov    %al,(%ecx)
 264:	8b 55 f4             	mov    -0xc(%ebp),%edx
 267:	8b 45 08             	mov    0x8(%ebp),%eax
 26a:	01 d0                	add    %edx,%eax
 26c:	0f b6 00             	movzbl (%eax),%eax
 26f:	3c 1f                	cmp    $0x1f,%al
 271:	7e 0f                	jle    282 <encode_2+0x77>
 273:	8b 55 f4             	mov    -0xc(%ebp),%edx
 276:	8b 45 08             	mov    0x8(%ebp),%eax
 279:	01 d0                	add    %edx,%eax
 27b:	0f b6 00             	movzbl (%eax),%eax
 27e:	3c 7f                	cmp    $0x7f,%al
 280:	75 0b                	jne    28d <encode_2+0x82>
 282:	8b 55 f4             	mov    -0xc(%ebp),%edx
 285:	8b 45 08             	mov    0x8(%ebp),%eax
 288:	01 d0                	add    %edx,%eax
 28a:	c6 00 2a             	movb   $0x2a,(%eax)
 28d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
 291:	8b 45 f4             	mov    -0xc(%ebp),%eax
 294:	3b 45 f0             	cmp    -0x10(%ebp),%eax
 297:	7c 9b                	jl     234 <encode_2+0x29>
 299:	8b 45 f0             	mov    -0x10(%ebp),%eax
 29c:	83 c4 24             	add    $0x24,%esp
 29f:	5b                   	pop    %ebx
 2a0:	5d                   	pop    %ebp
 2a1:	c3                   	ret    

000002a2 <do_phase>:
 2a2:	55                   	push   %ebp
 2a3:	89 e5                	mov    %esp,%ebp
 2a5:	53                   	push   %ebx
 2a6:	83 ec 14             	sub    $0x14,%esp
 2a9:	e8 fc ff ff ff       	call   2aa <do_phase+0x8>
			2aa: R_386_PC32	__x86.get_pc_thunk.bx
 2ae:	81 c3 02 00 00 00    	add    $0x2,%ebx
			2b0: R_386_GOTPC	_GLOBAL_OFFSET_TABLE_
 2b4:	c7 04 24 e7 00 00 00 	movl   $0xe7,(%esp)
 2bb:	e8 fc ff ff ff       	call   2bc <do_phase+0x1a>
			2bc: R_386_PLT32	generate_code
 2c0:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			2c2: R_386_GOT32	encoder
 2c6:	8b 40 04             	mov    0x4(%eax),%eax
 2c9:	8b 93 00 00 00 00    	mov    0x0(%ebx),%edx
			2cb: R_386_GOT32	gyFtXcaH
 2cf:	89 14 24             	mov    %edx,(%esp)
 2d2:	ff d0                	call   *%eax
 2d4:	8b 83 00 00 00 00    	mov    0x0(%ebx),%eax
			2d6: R_386_GOT32	gyFtXcaH
 2da:	89 04 24             	mov    %eax,(%esp)
 2dd:	e8 fc ff ff ff       	call   2de <do_phase+0x3c>
			2de: R_386_PLT32	puts
 2e2:	83 c4 14             	add    $0x14,%esp
 2e5:	5b                   	pop    %ebx
 2e6:	5d                   	pop    %ebp
 2e7:	c3                   	ret    

Disassembly of section .data:

00000000 <VTVSLR>:
   0:	29 5c c1 00          	sub    %ebx,0x0(%ecx,%eax,8)
   4:	49                   	dec    %ecx
   5:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
   6:	24 a6                	and    $0xa6,%al
   8:	ef                   	out    %eax,(%dx)
   9:	0f 50                	(bad)  
   b:	8a 0c c5 bd b9 2d f5 	mov    -0xad24643(,%eax,8),%cl
  12:	3c f2                	cmp    $0xf2,%al
  14:	ee                   	out    %al,(%dx)
  15:	bb 31 70 45 2c       	mov    $0x2c457031,%ebx
  1a:	64 96                	fs xchg %eax,%esi
  1c:	03 53 02             	add    0x2(%ebx),%edx
  1f:	27                   	daa    
  20:	16                   	push   %ss
  21:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
  22:	5b                   	pop    %ebx
  23:	c7                   	(bad)  
  24:	74 e9                	je     f <VTVSLR+0xf>
  26:	17                   	pop    %ss
  27:	e5 99                	in     $0x99,%eax
  29:	22 dd                	and    %ch,%bl
  2b:	f2 6d                	repnz insl (%dx),%es:(%edi)
  2d:	ea e1 b0 2c 08 45 93 	ljmp   $0x9345,$0x82cb0e1
  34:	23 9b 59 28 01 34    	and    0x34012859(%ebx),%ebx
  3a:	36 0d 95 95      	ss or  $0x32329595,%eax

0000003e <gyFtXcaH>:
  3e:	32 32                	xor    (%edx),%dh
  40:	31 32                	xor    %esi,(%edx)
  42:	32 30                	xor    (%eax),%dh
  44:	31 33                	xor    %esi,(%ebx)
  46:	32 00                	xor    (%eax),%al

00000048 <IHBihm>:
  48:	ff                   	(bad)  
  49:	ff                   	(bad)  
  4a:	ff                   	(bad)  
  4b:	ff                   	.byte 0xff

Disassembly of section .rodata:

00000000 <WHtCKc-0x20>:
   0:	36 00 00             	add    %al,%ss:(%eax)
	...

00000020 <WHtCKc>:
  20:	39 f5                	cmp    %esi,%ebp
  22:	ff                   	(bad)  
  23:	ff f0                	push   %eax
  25:	2e 00 00             	add    %al,%cs:(%eax)
  28:	d1 51 00             	rcll   0x0(%ecx)
  2b:	00 b4 37 00 00 ca 2f 	add    %dh,0x2fca0000(%edi,%esi,1)
  32:	00 00                	add    %al,(%eax)
  34:	5f                   	pop    %edi
  35:	04 00                	add    $0x0,%al
  37:	00 35 16 00 00 cd    	add    %dh,0xcd000016
  3d:	b4 ff                	mov    $0xff,%ah
  3f:	ff 20                	jmp    *(%eax)
  41:	d0 ff                	sar    %bh
  43:	ff c1                	inc    %ecx
  45:	ba ff ff 41 70       	mov    $0x7041ffff,%edx
  4a:	00 00                	add    %al,(%eax)
  4c:	b7 a1                	mov    $0xa1,%bh
  4e:	ff                   	(bad)  
  4f:	ff 30                	pushl  (%eax)
  51:	95                   	xchg   %eax,%ebp
  52:	ff                   	(bad)  
  53:	ff 28                	ljmp   *(%eax)
  55:	6f                   	outsl  %ds:(%esi),(%dx)
  56:	00 00                	add    %al,(%eax)
  58:	5b                   	pop    %ebx
  59:	47                   	inc    %edi
	...
			5c: R_386_GOTOFF	.L7
			60: R_386_GOTOFF	.L9
			64: R_386_GOTOFF	.L10
			68: R_386_GOTOFF	.L6
			6c: R_386_GOTOFF	.L11
			70: R_386_GOTOFF	.L12
			74: R_386_GOTOFF	.L13
			78: R_386_GOTOFF	.L14

00000080 <YCsRCu>:
  80:	00 01                	add    %al,(%ecx)
  82:	02 03                	add    (%ebx),%al
  84:	04 05                	add    $0x5,%al
  86:	06                   	push   %es
  87:	07                   	pop    %es
  88:	08 09                	or     %cl,(%ecx)
  8a:	0a 0b                	or     (%ebx),%cl
  8c:	0c 0d                	or     $0xd,%al
  8e:	0e                   	push   %cs
  8f:	0f 10 11             	movups (%ecx),%xmm2
  92:	12 13                	adc    (%ebx),%dl
  94:	14 15                	adc    $0x15,%al
  96:	16                   	push   %ss
  97:	17                   	pop    %ss
  98:	18 19                	sbb    %bl,(%ecx)
  9a:	1a 1b                	sbb    (%ebx),%bl
  9c:	1c 1d                	sbb    $0x1d,%al
  9e:	1e                   	push   %ds
  9f:	1f                   	pop    %ds
  a0:	58                   	pop    %eax
  a1:	7a 20                	jp     c3 <YCsRCu+0x43>
  a3:	6a 6e                	push   $0x6e
  a5:	53                   	push   %ebx
  a6:	38 41 6f             	cmp    %al,0x6f(%ecx)
  a9:	57                   	push   %edi
  aa:	22 3b                	and    (%ebx),%bh
  ac:	48                   	dec    %eax
  ad:	68 47 28 37 2b       	push   $0x2b372847
  b2:	5b                   	pop    %ebx
  b3:	4a                   	dec    %edx
  b4:	7e 4f                	jle    105 <.L14+0x3>
  b6:	67 39 26 6b 46       	cmp    %esp,0x466b
  bb:	4e                   	dec    %esi
  bc:	60                   	pusha  
  bd:	42                   	inc    %edx
  be:	27                   	daa    
  bf:	5e                   	pop    %esi
  c0:	21 33                	and    %esi,(%ebx)
  c2:	64 61                	fs popa 
  c4:	74 4b                	je     111 <.L14+0xf>
  c6:	7c 69                	jl     131 <generate_code+0x14>
  c8:	71 29                	jno    f3 <YCsRCu+0x73>
  ca:	56                   	push   %esi
  cb:	7d 65                	jge    132 <generate_code+0x15>
  cd:	52                   	push   %edx
  ce:	4c                   	dec    %esp
  cf:	73 3a                	jae    10b <.L14+0x9>
  d1:	5a                   	pop    %edx
  d2:	4d                   	dec    %ebp
  d3:	6d                   	insl   (%dx),%es:(%edi)
  d4:	5c                   	pop    %esp
  d5:	76 45                	jbe    11c <.L6+0x9>
  d7:	25 59 62 3f 5d       	and    $0x5d3f6259,%eax
  dc:	34 3d                	xor    $0x3d,%al
  de:	35 72 3c 2f 77       	xor    $0x772f3c72,%eax
  e3:	43                   	inc    %ebx
  e4:	6c                   	insb   (%dx),%es:(%edi)
  e5:	55                   	push   %ebp
  e6:	49                   	dec    %ecx
  e7:	44                   	inc    %esp
  e8:	7b 63                	jnp    14d <generate_code+0x30>
  ea:	2a 31                	sub    (%ecx),%dh
  ec:	50                   	push   %eax
  ed:	23 78 70             	and    0x70(%eax),%edi
  f0:	75 79                	jne    16b <generate_code+0x4e>
  f2:	40                   	inc    %eax
  f3:	5f                   	pop    %edi
  f4:	2c 54                	sub    $0x54,%al
  f6:	2e 3e 2d 24 36 51 32 	cs ds sub $0x32513624,%eax
  fd:	66                   	data16
  fe:	30                   	.byte 0x30
  ff:	7f                   	.byte 0x7f

Disassembly of section .data.rel.local:

00000000 <phase_id>:
   0:	00 00                	add    %al,(%eax)
			0: R_386_32	.rodata
	...

Disassembly of section .data.rel:

00000000 <encoder>:
	...
			0: R_386_32	encode_1
			4: R_386_32	encode_2

00000008 <phase>:
   8:	00 00                	add    %al,(%eax)
			8: R_386_32	do_phase
	...

Disassembly of section .text.__x86.get_pc_thunk.bx:

00000000 <__x86.get_pc_thunk.bx>:
   0:	8b 1c 24             	mov    (%esp),%ebx
   3:	c3                   	ret    

Disassembly of section .comment:

00000000 <.comment>:
   0:	00 47 43             	add    %al,0x43(%edi)
   3:	43                   	inc    %ebx
   4:	3a 20                	cmp    (%eax),%ah
   6:	28 47 4e             	sub    %al,0x4e(%edi)
   9:	55                   	push   %ebp
   a:	29 20                	sub    %esp,(%eax)
   c:	34 2e                	xor    $0x2e,%al
   e:	38 2e                	cmp    %ch,(%esi)
  10:	35 20 32 30 31       	xor    $0x31303220,%eax
  15:	35 30 36 32 33       	xor    $0x33323630,%eax
  1a:	20 28                	and    %ch,(%eax)
  1c:	52                   	push   %edx
  1d:	65 64 20 48 61       	gs and %cl,%fs:0x61(%eax)
  22:	74 20                	je     44 <gyFtXcaH+0x6>
  24:	34 2e                	xor    $0x2e,%al
  26:	38 2e                	cmp    %ch,(%esi)
  28:	35 2d 34 34 29       	xor    $0x2934342d,%eax
	...

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	01 7a 52             	add    %edi,0x52(%edx)
   b:	00 01                	add    %al,(%ecx)
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    %ebx,(%ebx)
  11:	0c 04                	or     $0x4,%al
  13:	04 88                	add    $0x88,%al
  15:	01 00                	add    %eax,(%eax)
  17:	00 1c 00             	add    %bl,(%eax,%eax,1)
  1a:	00 00                	add    %al,(%eax)
  1c:	1c 00                	sbb    $0x0,%al
  1e:	00 00                	add    %al,(%eax)
  20:	00 00                	add    %al,(%eax)
			20: R_386_PC32	.text
  22:	00 00                	add    %al,(%eax)
  24:	67 00 00             	add    %al,(%bx,%si)
  27:	00 00                	add    %al,(%eax)
  29:	41                   	inc    %ecx
  2a:	0e                   	push   %cs
  2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  31:	02 63 c5             	add    -0x3b(%ebx),%ah
  34:	0c 04                	or     $0x4,%al
  36:	04 00                	add    $0x0,%al
  38:	20 00                	and    %al,(%eax)
  3a:	00 00                	add    %al,(%eax)
  3c:	3c 00                	cmp    $0x0,%al
  3e:	00 00                	add    %al,(%eax)
  40:	67 00 00             	add    %al,(%bx,%si)
			40: R_386_PC32	.text
  43:	00 b6 00 00 00 00    	add    %dh,0x0(%esi)
  49:	41                   	inc    %ecx
  4a:	0e                   	push   %cs
  4b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  51:	41                   	inc    %ecx
  52:	83 03 02             	addl   $0x2,(%ebx)
  55:	b0 c3                	mov    $0xc3,%al
  57:	41                   	inc    %ecx
  58:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  5b:	04 20                	add    $0x20,%al
  5d:	00 00                	add    %al,(%eax)
  5f:	00 60 00             	add    %ah,0x0(%eax)
  62:	00 00                	add    %al,(%eax)
  64:	1d 01 00 00 57       	sbb    $0x57000001,%eax
			64: R_386_PC32	.text
  69:	00 00                	add    %al,(%eax)
  6b:	00 00                	add    %al,(%eax)
  6d:	41                   	inc    %ecx
  6e:	0e                   	push   %cs
  6f:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  75:	44                   	inc    %esp
  76:	83 03 02             	addl   $0x2,(%ebx)
  79:	4e                   	dec    %esi
  7a:	c3                   	ret    
  7b:	41                   	inc    %ecx
  7c:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  7f:	04 20                	add    $0x20,%al
  81:	00 00                	add    %al,(%eax)
  83:	00 84 00 00 00 74 01 	add    %al,0x1740000(%eax,%eax,1)
			88: R_386_PC32	.text
  8a:	00 00                	add    %al,(%eax)
  8c:	97                   	xchg   %eax,%edi
  8d:	00 00                	add    %al,(%eax)
  8f:	00 00                	add    %al,(%eax)
  91:	41                   	inc    %ecx
  92:	0e                   	push   %cs
  93:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  99:	44                   	inc    %esp
  9a:	83 03 02             	addl   $0x2,(%ebx)
  9d:	8e c3                	mov    %ebx,%es
  9f:	41                   	inc    %ecx
  a0:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  a3:	04 20                	add    $0x20,%al
  a5:	00 00                	add    %al,(%eax)
  a7:	00 a8 00 00 00 0b    	add    %ch,0xb000000(%eax)
			ac: R_386_PC32	.text
  ad:	02 00                	add    (%eax),%al
  af:	00 97 00 00 00 00    	add    %dl,0x0(%edi)
  b5:	41                   	inc    %ecx
  b6:	0e                   	push   %cs
  b7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  bd:	44                   	inc    %esp
  be:	83 03 02             	addl   $0x2,(%ebx)
  c1:	8e c3                	mov    %ebx,%es
  c3:	41                   	inc    %ecx
  c4:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  c7:	04 20                	add    $0x20,%al
  c9:	00 00                	add    %al,(%eax)
  cb:	00 cc                	add    %cl,%ah
  cd:	00 00                	add    %al,(%eax)
  cf:	00 a2 02 00 00 46    	add    %ah,0x46000002(%edx)
			d0: R_386_PC32	.text
  d5:	00 00                	add    %al,(%eax)
  d7:	00 00                	add    %al,(%eax)
  d9:	41                   	inc    %ecx
  da:	0e                   	push   %cs
  db:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  e1:	44                   	inc    %esp
  e2:	83 03 7d             	addl   $0x7d,(%ebx)
  e5:	c3                   	ret    
  e6:	41                   	inc    %ecx
  e7:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  ea:	04 00                	add    $0x0,%al
  ec:	10 00                	adc    %al,(%eax)
  ee:	00 00                	add    %al,(%eax)
  f0:	f0 00 00             	lock add %al,(%eax)
  f3:	00 00                	add    %al,(%eax)
			f4: R_386_PC32	.text.__x86.get_pc_thunk.bx
  f5:	00 00                	add    %al,(%eax)
  f7:	00 04 00             	add    %al,(%eax,%eax,1)
  fa:	00 00                	add    %al,(%eax)
  fc:	00 00                	add    %al,(%eax)
	...
